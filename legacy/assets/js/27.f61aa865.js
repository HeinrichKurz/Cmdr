(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{412:function(t,e,a){"use strict";a.r(e);var s=a(41),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#types"}},[t._v("#")]),t._v(" Types")]),t._v(" "),a("p",[t._v("By default, these types are available:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Type name")]),t._v(" "),a("th",[t._v("Data type")]),t._v(" "),a("th",[t._v("Type name")]),t._v(" "),a("th",[t._v("Data type")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("string")])]),t._v(" "),a("td",[a("code",[t._v("string")])]),t._v(" "),a("td",[a("code",[t._v("strings")])]),t._v(" "),a("td",[a("code",[t._v("array<string>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("number")])]),t._v(" "),a("td",[a("code",[t._v("number")])]),t._v(" "),a("td",[a("code",[t._v("numbers")])]),t._v(" "),a("td",[a("code",[t._v("array<number>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("integer")])]),t._v(" "),a("td",[a("code",[t._v("number")])]),t._v(" "),a("td",[a("code",[t._v("integers")])]),t._v(" "),a("td",[a("code",[t._v("array<number>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("boolean")])]),t._v(" "),a("td",[a("code",[t._v("boolean")])]),t._v(" "),a("td",[a("code",[t._v("booleans")])]),t._v(" "),a("td",[a("code",[t._v("array<boolean>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("player")])]),t._v(" "),a("td",[a("code",[t._v("Player")])]),t._v(" "),a("td",[a("code",[t._v("players")])]),t._v(" "),a("td",[a("code",[t._v("array<Player>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("playerId")])]),t._v(" "),a("td",[a("code",[t._v("number")])]),t._v(" "),a("td",[a("code",[t._v("playerIds")])]),t._v(" "),a("td",[a("code",[t._v("array<number>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("team")])]),t._v(" "),a("td",[a("code",[t._v("Team")])]),t._v(" "),a("td",[a("code",[t._v("teams")])]),t._v(" "),a("td",[a("code",[t._v("array<Team>")])])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td"),t._v(" "),a("td",[a("code",[t._v("teamPlayers")])]),t._v(" "),a("td",[a("code",[t._v("array<Player>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("command")])]),t._v(" "),a("td",[a("code",[t._v("string")])]),t._v(" "),a("td",[a("code",[t._v("commands")])]),t._v(" "),a("td",[a("code",[t._v("array<string>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("userInput")])]),t._v(" "),a("td",[a("code",[t._v("Enum.UserInputType \\| Enum.KeyCode")])]),t._v(" "),a("td",[a("code",[t._v("userInputs")])]),t._v(" "),a("td",[a("code",[t._v("array<Enum.UserInputType \\| Enum.KeyCode>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("brickColor")])]),t._v(" "),a("td",[a("code",[t._v("BrickColor")])]),t._v(" "),a("td",[a("code",[t._v("brickColors")])]),t._v(" "),a("td",[a("code",[t._v("array<BrickColor>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("teamColor")])]),t._v(" "),a("td",[a("code",[t._v("BrickColor")])]),t._v(" "),a("td",[a("code",[t._v("teamColors")])]),t._v(" "),a("td",[a("code",[t._v("array<BrickColor>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("color3")])]),t._v(" "),a("td",[a("code",[t._v("Color3")])]),t._v(" "),a("td",[a("code",[t._v("color3s")])]),t._v(" "),a("td",[a("code",[t._v("array<Color3>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("hexColor3")])]),t._v(" "),a("td",[a("code",[t._v("Color3")])]),t._v(" "),a("td",[a("code",[t._v("hexColor3s")])]),t._v(" "),a("td",[a("code",[t._v("array<Color3>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("brickColor3")])]),t._v(" "),a("td",[a("code",[t._v("Color3")])]),t._v(" "),a("td",[a("code",[t._v("brickColor3s")])]),t._v(" "),a("td",[a("code",[t._v("array<Color3>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("vector3")])]),t._v(" "),a("td",[a("code",[t._v("Vector3")])]),t._v(" "),a("td",[a("code",[t._v("vector3s")])]),t._v(" "),a("td",[a("code",[t._v("array<Vector3>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("vector2")])]),t._v(" "),a("td",[a("code",[t._v("Vector2")])]),t._v(" "),a("td",[a("code",[t._v("vector2s")])]),t._v(" "),a("td",[a("code",[t._v("array<Vector2>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("duration")])]),t._v(" "),a("td",[a("code",[t._v("number")])]),t._v(" "),a("td",[a("code",[t._v("durations")])]),t._v(" "),a("td",[a("code",[t._v("array<number>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("storedKey")])]),t._v(" "),a("td",[a("code",[t._v("string")])]),t._v(" "),a("td",[a("code",[t._v("storedKeys")])]),t._v(" "),a("td",[a("code",[t._v("array<strings>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("url")])]),t._v(" "),a("td",[a("code",[t._v("string")])]),t._v(" "),a("td",[a("code",[t._v("urls")])]),t._v(" "),a("td",[a("code",[t._v("array<strings>")])])])])]),t._v(" "),a("p",[t._v("Plural types (types that return a table) are listable, so you can provide a comma-separated list of values.")]),t._v(" "),a("p",[t._v("Custom types are defined as tables that implement specific named functions. When Types are in a ModuleScript, the ModuleScript should not return the table directly; instead it should return a function, which accepts the Registry as a parameter. You should then call "),a("code",[t._v('registry:RegisterType("typeName", yourTable)')]),t._v(" to register it.")]),t._v(" "),a("p",[t._v("Check out the "),a("api-link",{attrs:{to:"Registry.TypeDefinition"}},[t._v("API reference")]),t._v(" for a full reference of all available options.")],1),t._v(" "),a("div",{staticClass:"language-lua line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-lua"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("local")]),t._v(" intType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tTransform "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tonumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\tValidate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Only whole numbers are valid."')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\tParse "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("registry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tregistry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("RegisterType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"integer"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" intType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("p",[t._v("Take a gander at the "),a("a",{attrs:{href:"https://github.com/evaera/Cmdr/legacy/tree/master/Cmdr/legacy/BuiltInTypes",target:"_blank",rel:"noopener noreferrer"}},[t._v("built-in types"),a("OutboundLink")],1),t._v(" for more examples.")]),t._v(" "),a("h2",{attrs:{id:"default-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#default-value"}},[t._v("#")]),t._v(" Default value")]),t._v(" "),a("p",[t._v('You can specify a "default value" for your type by adding a '),a("code",[t._v("Default")]),t._v(" function to it. For example, the default value for the "),a("code",[t._v("players")]),t._v(" type is the name of the player who ran the command. The "),a("code",[t._v("Default")]),t._v(" function should always return a "),a("strong",[t._v("string")]),t._v(", as this is inserted BEFORE parsing.")]),t._v(" "),a("p",[t._v("For any argument that is type with a default value, you can simply type a "),a("code",[t._v(".")]),t._v(" in Cmdr and the default value will automatically be used in its place.")]),t._v(" "),a("h2",{attrs:{id:"enum-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enum-types"}},[t._v("#")]),t._v(" Enum types")]),t._v(" "),a("p",[t._v("Because Enum types are so common, there is a special function that easily lets you create an Enum type. When a command has an argument of this type, it'll always be a string matching exactly one of the strings in the array you define (see below).")]),t._v(" "),a("div",{staticClass:"language-lua line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-lua"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("registry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tregistry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("RegisterType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"place"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" registry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Cmdr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MakeEnumType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Place"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World 1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World 2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World 3"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Final World"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])])])}),[],!1,null,null,null);e.default=r.exports}}]);
